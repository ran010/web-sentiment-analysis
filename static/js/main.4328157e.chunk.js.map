{"version":3,"sources":["components/TextScroller.jsx","App.js","serviceWorker.js","index.js"],"names":["TextScroller","text","useState","key","setKey","scrolling","useSpring","from","transform","to","config","duration","reset","onRest","div","style","App","total","death","recovered","statDetails","setStatDetails","trendingData","setTrendingData","searchKeyword","setSearchKeyword","sentimentResponse","setSentimentResponse","loader","setLoader","useEffect","axios","get","then","response","data","totalCases","reduce","prev","next","cases","totalRecovered","totalDeath","deaths","url","method","slice","Container","Row","Col","md","map","name","href","Form","FormGroup","Input","className","placeholder","onChange","event","persist","target","value","Button","onClick","console","log","keyword","type","color","height","width","visible","id","tweet","data-href","data-tabs","data-width","data-height","data-small-header","data-adapt-container-width","data-hide-cover","data-show-facepile","cite","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4328157e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\n\nconst TextScroller = ({ text }) => {\n  const [key, setKey] = useState(1);\n\n  const scrolling = useSpring({\n    from: { transform: \"translate(60%,0)\" },\n    to: { transform: \"translate(-60%,0)\" },\n    config: { duration: 20000 },\n    reset: true,\n    //reverse: key % 2 == 0,\n    onRest: () => {\n      setKey(key + 1);\n    }\n  });\n\n  return (\n    <div key={key}>\n      <animated.div style={scrolling}>{text}</animated.div>\n    </div>\n  );\n};\n\nexport default TextScroller;\n","import React, {useState, useEffect} from 'react';\nimport { Container, Row, Col, Input, FormGroup, Form, Button,Navbar} from 'reactstrap';\nimport axios from \"axios\";\nimport Loader from 'react-loader-spinner';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport TextScroller from './components/TextScroller'\nfunction App() {\n  const [statDetails, setStatDetails] = useState({total: '', death:'', recovered: ''})\n  const [trendingData, setTrendingData] = useState([])\n  const [searchKeyword, setSearchKeyword] = useState('')\n  const [sentimentResponse, setSentimentResponse] = useState([])\n  const [loader, setLoader] = useState(false)\n  useEffect( ()=> {\n    axios.get('https://corona.lmao.ninja/v2/countries')\n    .then(function (response) {\n      var data = response.data\n      var totalCases = data.reduce((prev,next) => prev + next.cases,0)\n      var totalRecovered = data.reduce((prev,next) => prev + next.recovered,0)\n      var totalDeath = data.reduce((prev,next) => prev + next.deaths,0)\n      setStatDetails({total: totalCases, death:totalDeath, recovered: totalRecovered})\n    })\n\n    axios({url: 'https://twiter-sentiment-api.herokuapp.com/trending', method: 'get'})\n    .then(function (response) {\n      setTrendingData(response.data.slice(0, 10))\n    })\n  },[])\n\n  const handleInput = (event) => {\n    event.persist();\n    setSearchKeyword(event.target.value)\n  }\n\n  const getSentimentData = () => {\n    console.log(searchKeyword)\n    if (searchKeyword != ''){\n      setLoader(true)\n      axios({\n        method: 'post',\n        \"headers\": {\n          \"Content-Type\": \"application/json\"\n        },\n        url: 'https://twiter-sentiment-api.herokuapp.com/',\n        data:{\n          keyword: searchKeyword,\n        }\n      }).then((response)=> {\n        setSentimentResponse(response.data)\n        setLoader(false)\n      })\n    }\n  }\n\n  return (\n    <Container>\n\n\n      <TextScroller text=\"Stay Home Stay Safe\" />\n      <Row>\n        <Col md={3}>\n          <h3>Trending Topics</h3>\n          {(trendingData || []).map((data) => {\n            return(\n              <>\n                <p><a  key={data.name} href={data.url || ''}>{data.name}</a></p>\n              </>\n            )\n          })}\n        </Col>\n        <Col md={6}>\n          <Form >\n            <FormGroup>\n              <Input name=\"searchKeyword\" className=\"search\" placeholder=\"Enter keyword to search\" onChange={handleInput}/>\n            </FormGroup>\n            <Button onClick={getSentimentData}>Submit</Button>\n          </Form>\n          <div className=\"text-center pt-5\">\n            <Loader\n              type=\"Circles\"\n              color=\"#00BFFF\"\n              height={200}\n              width={200}\n              visible={loader}\n\n            />\n          </div>\n\n          {!loader && sentimentResponse && (sentimentResponse || []).map((response) => {\n            return(\n              <>\n               <p><a href={`https://twitter.com/user/status/${response.id}`}>{response.tweet}>{response.tweet}</a></p>\n              </>\n              )\n          } )}\n        </Col>\n        <Col md={3}>\n          <div>\n            <h3>Covid Cases</h3>\n            <p>Total Cases: {statDetails.total}</p>\n            <p>Total Death: {statDetails.death}</p>\n            <p>Total Recovered: {statDetails.recovered}</p>\n          </div>\n          <div className=\"fb-page\" data-href=\"https://www.facebook.com/WHO\" data-tabs=\"timeline\" data-width=\"500\"\n               data-height=\"\" data-small-header=\"true\" data-adapt-container-width=\"true\" data-hide-cover=\"false\"\n               data-show-facepile=\"false\">\n            <blockquote cite=\"https://www.facebook.com/WHO\" className=\"fb-xfbml-parse-ignore\"><a\n              href=\"https://www.facebook.com/WHO\">World Health Organization (WHO)</a></blockquote>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}